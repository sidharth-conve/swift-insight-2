{
        "Question": "Number of students absent on 2nd september",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN attendance_status = 2 THEN student_id END) AS students_absent_on_second_september, COUNT(DISTINCT student_id) AS total_unique_students_logged, '2024-09-02'::date AS date_considered FROM student_attendance WHERE log_date = '2024-09-02';"
    },
    {
        "Question": "How does student attendance vary between boys and girls this year?",
        "SQL": "WITH attendance_data AS (SELECT t1.student_id, COUNT(DISTINCT t1.log_date) AS days_present, COUNT(DISTINCT DATE_TRUNC('day', t1.log_date)) AS total_days FROM student_attendance t1 WHERE t1.attendance_status = 1 AND t1.log_date BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE - INTERVAL '1 day' GROUP BY t1.student_id), students_with_attendance_percentage AS (SELECT t2.student_id, (t2.days_present::FLOAT / t2.total_days) * 100 AS attendance_percentage FROM attendance_data t2), gender_totals AS (SELECT t3.gender, COUNT(DISTINCT t3.student_id) AS total_students FROM student_registry t3 GROUP BY t3.gender) SELECT t4.gender, COUNT(DISTINCT t4.student_id) AS present_students, t6.total_students, DATE_TRUNC('year', CURRENT_DATE)::date AS start_date_considered, (CURRENT_DATE - INTERVAL '1 day')::date AS end_date_considered FROM student_registry t4 JOIN students_with_attendance_percentage t5 ON t4.student_id = t5.student_id JOIN gender_totals t6 ON t4.gender = t6.gender WHERE t5.attendance_percentage > 50 GROUP BY t4.gender, t6.total_students;"
    },
    {
        "Question": "What is the average student attendance percentage for the entire state this academic year?",
        "SQL": "SELECT ROUND(SUM(month_present_count) *1.0 / SUM(month_days_recorded), 4)*100 AS atten_percentage, ('2024-08-01')::date AS start_date_considered, ('2025-03-31')::date AS end_date_considered FROM monthly_student_attendance WHERE month_start_date >= '2024-04-01' AND month_end_date <= '2025-03-31';"
    },
    {
        "Question": "How many students were absent in last two week?", 
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN (week_absent_count * 1.0 / week_days_recorded) > 0.5 THEN student_id END) AS absent_students_count, COUNT(DISTINCT student_id) AS total_students, DATE_TRUNC('week', CURRENT_DATE - INTERVAL '2 week')::date AS start_date_considered, (DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') + INTERVAL '5 day')::date AS end_date_considered FROM weekly_student_attendance WHERE week_start_date >= DATE_TRUNC('week', CURRENT_DATE - INTERVAL '2 week') AND week_end_date <= (DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') + INTERVAL '6 day');"
    },
    {
        "Question": "What is the percentage of students who attended all days in the past two weeks?", 
        "SQL": "SELECT ROUND(SUM(CASE WHEN week_present_count = 12 THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT student_id), 2) * 100 AS atten_percentage, DATE_TRUNC('week', CURRENT_DATE - INTERVAL '2 week')::date AS start_date_considered, (DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') + INTERVAL '5 day')::date AS end_date_considered FROM weekly_student_attendance WHERE week_start_date >= DATE_TRUNC('week', CURRENT_DATE - INTERVAL '2 week') AND week_end_date <= (DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') + INTERVAL '6 day');"
    },
    {
        "Question": "August month attendance for schools with less than 100 students in the block", 
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN (t1.month_present_count * 1.0 / t1.month_days_recorded) >= 0.5 THEN t1.student_id END) AS present_students_count, COUNT(DISTINCT CASE WHEN (t1.month_absent_count * 1.0 / t1.month_days_recorded) > 0.5 THEN t1.student_id END) AS absent_students_count, COUNT(DISTINCT t1.student_id) AS total_students,'2024-08-01'::date AS start_date_considered, '2024-08-31'::date AS end_date_considered FROM monthly_student_attendance t1 JOIN school_registry t2 ON t1.school_code = t2.school_code JOIN total_teachers_students t3 ON t2.school_code = t3.school_code WHERE t3.total_students < 100 AND t1.month_start_date >= '2024-08-01' AND t1.month_end_date <= '2024-08-31' AND t2.block_name ILIKE 'Banikhet';"
    },
    {
        "Question": "What is august month attendance  in schools with more than 10 teachers in the block?", 
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN (t1.month_present_count * 1.0 / t1.month_days_recorded) >= 0.5 THEN t1.student_id END) AS present_students_count, COUNT(DISTINCT CASE WHEN (t1.month_absent_count * 1.0 / t1.month_days_recorded) > 0.5 THEN t1.student_id END) AS absent_students_count, COUNT(DISTINCT t1.student_id) AS total_students,'2024-08-01'::date AS start_date_considered, '2024-08-31'::date AS end_date_considered FROM monthly_student_attendance t1 JOIN school_registry t2 ON t1.school_code = t2.school_code JOIN total_teachers_students t3 ON t2.school_code = t3.school_code WHERE t3.total_teachers > 10 AND t1.month_start_date >= '2024-08-01' AND t1.month_end_date <= '2024-08-31' AND t2.block_name ILIKE 'Banikhet';"
    },
    {
        "Question": "What is student attendance for district Kinnaur for August month?", 
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN (t1.month_present_count *1.0 / t1.month_days_recorded) >= 0.5 THEN t1.student_id END) AS present_students_count, COUNT(DISTINCT CASE WHEN (t1.month_absent_count *1.0 / t1.month_days_recorded) > 0.5 THEN t1.student_id END) AS absent_students_count, COUNT(DISTINCT t1.student_id) AS total_students , ('2024-08-01')::date AS start_date_considered, ('2024-08-31')::date AS end_date_considered FROM monthly_student_attendance t1 INNER JOIN school_registry t2 ON t1.school_code = t2.school_code  WHERE t1.month_start_date >= '2024-08-01' AND t1.month_end_date <= '2024-08-31' AND t2.district_name ILIKE 'Kinnaur';"
    },
    {
        "Question": "Compare student attendance of mandi and lahul",
        "SQL": "SELECT district_name, present_students, absent_students, (ROUND(present_students * 1.0/total_students, 4)*100) present_percentage, (ROUND(absent_students*1.0 /total_students, 4)*100) AS absent_percentage, total_students, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month')::DATE AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day')::DATE AS end_date_considered FROM (SELECT district_name, COUNT(DISTINCT CASE WHEN (t1.month_present_count * 1.0 / t1.month_days_recorded) >= 0.5 THEN t1.student_id END) AS present_students, COUNT(DISTINCT CASE WHEN (t1.month_absent_count * 1.0 / t1.month_days_recorded) > 0.5 THEN t1.student_id END) AS absent_students, COUNT(DISTINCT t1.student_id) AS total_students FROM  monthly_student_attendance t1 INNER JOIN school_registry t2 ON t1.school_code = t2.school_code WHERE (t2.district_name ILIKE 'MANDI' OR t2.district_name ILIKE 'LAHUL & SPITI') AND t1.month_start_date >= (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month') AND t1.month_end_date <= (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day') GROUP BY t2.district_name);"
    },
    {
        "Question": "Give me last thursday student attendance of primary schools",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN t1.attendance_status = 1 THEN t1.student_id END) AS present_students, COUNT(DISTINCT CASE WHEN t1.attendance_status =2 THEN t1.student_id END) AS absent_students, COUNT(DISTINCT t1.student_id) AS total_students_logged, DATE_TRUNC('week', CURRENT_DATE)::date - 4 AS date_considered FROM student_attendance t1 INNER JOIN school_registry t2 ON t1.school_code =  t2.school_code WHERE  t1.log_date = DATE_TRUNC('week', CURRENT_DATE)::date - 4 AND t2.school_category ILIKE 'Primary';"
    },
    {
        "Question": "Attendance where pupils of class 5 or more is studying?",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN t1.attendance_status = 1 THEN t1.student_id END) AS present_students, COUNT(DISTINCT CASE WHEN t1.attendance_status =2 THEN t1.student_id END) AS absent_students, COUNT(DISTINCT t1.student_id) AS total_students_logged, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month')::DATE AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day')::DATE AS end_date_considered FROM student_attendance t1 INNER JOIN student_registry t2 ON t1.school_code =  t2.school_code WHERE t2.class >=5 AND t1.log_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND t1.log_date <= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day';"
    },
    {
        "Question": "Identify the urban schools where highest number of students are absent.",
        "SQL": "SELECT t2.school_name, COUNT(DISTINCT CASE WHEN t1.attendance_status = 2 THEN t1.student_id ELSE NULL END) AS num_of_student_absent, COUNT(DISTINCT t1.student_id) AS total_students, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month')::DATE AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day')::DATE AS end_date_considered FROM student_attendance t1 INNER JOIN  school_registry t2 ON t1.school_code = t2.school_code WHERE school_location ILIKE 'Urban' AND log_date >=(DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month') AND log_date<=(DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day') GROUP BY  t2.school_name ORDER BY num_of_student_absent DESC LIMIT 10;"
    },
    {
        "Question": "What percentage of students were absent for more than 3 consecutive days last month?",
        "SQL": "WITH absences AS ( SELECT student_id, log_date, LAG(log_date, 1) OVER (PARTITION BY student_id ORDER BY log_date) AS previous_day_1, LAG(log_date, 2) OVER (PARTITION BY student_id ORDER BY log_date) AS previous_day_2 FROM student_attendance WHERE log_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND log_date < DATE_TRUNC('month', CURRENT_DATE) AND attendance_status = 2), absent_students_with_consecutive_days AS ( SELECT COUNT(DISTINCT student_id) AS consecutive_absent_count FROM absences WHERE log_date = previous_day_1 + INTERVAL '1 day' AND log_date = previous_day_2 + INTERVAL '2 days'), total_students AS ( SELECT COUNT(DISTINCT student_id) AS total_student_count FROM student_attendance WHERE log_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND log_date < DATE_TRUNC('month', CURRENT_DATE)) SELECT consecutive_absent_count, total_student_count,  ROUND(COALESCE(consecutive_absent_count * 1.0 / NULLIF(total_student_count, 0) * 100, 0), 2) AS percentage, DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')::date AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE) - Interval '1 day')::date AS end_date_considered FROM absent_students_with_consecutive_days, total_students;"
    },
    {
        "Question": "Which months had the highest and lowest student attendance so far?",
        "SQL": "WITH attendance_data AS (SELECT month_start_date, ROUND(SUM(month_present_count) * 1.0 / NULLIF(SUM(month_days_recorded), 0) * 100, 2) AS attendance_percentage FROM monthly_student_attendance WHERE month_start_date >= DATE_TRUNC('year', CURRENT_DATE) AND month_end_date < CURRENT_DATE GROUP BY month_start_date) SELECT 'Highest' AS type, EXTRACT(YEAR FROM month_start_date) AS year, TO_CHAR(month_start_date, 'Mon') AS month, attendance_percentage FROM attendance_data WHERE attendance_percentage = (SELECT MAX(attendance_percentage) FROM attendance_data) UNION ALL SELECT 'Lowest', EXTRACT(YEAR FROM month_start_date), TO_CHAR(month_start_date, 'Mon'), attendance_percentage FROM attendance_data WHERE attendance_percentage = (SELECT MIN(attendance_percentage) FROM attendance_data);"
    },
    {
        "Question": "What is the average student attendance percentage in the state for the past two weeks?",
        "SQL": "SELECT ROUND(SUM(week_present_count) * 1.0/SUM(week_days_recorded), 4)*100 AS average_attendance_percentage, DATE_TRUNC('week', CURRENT_DATE - INTERVAL '2 week')::date AS start_date_considered, (DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') + INTERVAL '5 days')::date AS end_date_considered FROM weekly_student_attendance WHERE week_start_date >= DATE_TRUNC('week', CURRENT_DATE - INTERVAL '2 week') AND week_end_date <=(DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') + INTERVAL '5 days');"
    },
    {
        "Question": "How many schools haven't marked student attendance for even once in last 15 days?",
        "SQL": "SELECT COUNT(DISTINCT t1.school_code) AS schools_without_attendance, DATE_TRUNC('day', CURRENT_DATE - INTERVAL '15 days')::date AS start_date_considered, DATE_TRUNC('day', CURRENT_DATE)::date AS end_date_considered FROM school_registry t1 LEFT JOIN student_attendance t2 ON t1.school_code = t2.school_code AND t2.log_date BETWEEN DATE_TRUNC('day', CURRENT_DATE - INTERVAL '15 days') AND DATE_TRUNC('day', CURRENT_DATE) WHERE t2.school_code IS NULL;"
    },
    {
        "Question": "Are there any specific days of the week where student absenteeism is significantly higher?",
        "SQL": "WITH day_totals AS (SELECT TO_CHAR(log_date, 'Day') AS day_name, COUNT(*) AS total_count FROM student_attendance GROUP BY TO_CHAR(log_date, 'Day')) SELECT dt.day_name, COUNT(*) AS absentee_count, ROUND(COUNT(*) * 1.0 / dt.total_count, 5) AS avg_absenteeism_rate FROM student_attendance t JOIN day_totals dt ON TO_CHAR(t.log_date, 'Day') = dt.day_name WHERE t.attendance_status = 2  GROUP BY dt.day_name, dt.total_count ORDER BY absentee_count DESC LIMIT 1;"
    },
    {
        "Question": "Give me last quarter student's attendance",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN (month_present_count * 1.0 / month_days_recorded) >= 0.5 THEN student_id END) AS present_students, COUNT(DISTINCT CASE WHEN (month_absent_count *1.0 / month_days_recorded) > 0.5 THEN student_id END) AS absent_students, COUNT(DISTINCT student_id) AS total_student_this_quarter, (DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 day') - INTERVAL '3 months')::date AS start_date_considered, (DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 day') - INTERVAL '1 day')::date AS end_date_considered FROM monthly_student_attendance WHERE month_start_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 day') - INTERVAL '3 months' AND month_end_date <= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 day') - INTERVAL '1 day';"
    },
        {
            "Question": "How many students have perfect attendance this year?",
            "SQL": "SELECT COUNT(*) AS num_student_perfect_attendance_this_year, DATE_TRUNC('year', CURRENT_DATE)::date AS start_date_considered, DATE_TRUNC('month', CURRENT_DATE)::date AS end_date_considered FROM ( SELECT student_id FROM monthly_student_attendance WHERE month_start_date >= DATE_TRUNC('year', CURRENT_DATE)  AND month_end_date < DATE_TRUNC('month', CURRENT_DATE)  GROUP BY student_id HAVING COUNT(CASE WHEN month_absent_count = 0 THEN 1 END) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 ) AS students_with_perfect_attendance_this_year;"
        },
        {
            "Question": "What is the trend of student attendance in the district for the past three months?",
            "SQL": "WITH monthly_attendance AS (SELECT DATE_TRUNC('month', month_start_date)::date AS start_date_considered, (DATE_TRUNC('month', month_end_date) + INTERVAL '1 month - 1 day')::date AS end_date_considered, COUNT(DISTINCT student_id) AS total_students, ROUND(AVG(month_present_count * 1.0 / NULLIF(month_days_recorded, 0) * 100), 2) AS average_attendance_percentage FROM monthly_student_attendance WHERE month_start_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '3 months') AND month_end_date <= DATE_TRUNC('month', CURRENT_DATE )GROUP BY month_start_date, month_end_date ORDER BY start_date_considered) SELECT start_date_considered, end_date_considered, total_students, average_attendance_percentage, ROUND(average_attendance_percentage - LAG(average_attendance_percentage) OVER (ORDER BY start_date_considered), 2) AS attendance_percentage_change, CASE WHEN average_attendance_percentage > LAG(average_attendance_percentage) OVER (ORDER BY start_date_considered) THEN 'Improving' WHEN average_attendance_percentage < LAG(average_attendance_percentage) OVER (ORDER BY start_date_considered) THEN 'Declining' ELSE 'Stable' END AS attendance_trend FROM monthly_attendance;"
        },
        {
            "Question": "Give me student attendance for last three months?",
            "SQL": "SELECT COUNT(DISTINCT student_id) AS total_students, COUNT(DISTINCT CASE WHEN attendance_ratio_present >= 0.5 THEN student_id ELSE NULL END) AS present_students, COUNT(DISTINCT CASE WHEN attendance_ratio_absent > 0.5 THEN student_id ELSE NULL END) AS absent_students, COUNT(DISTINCT student_id) -  COUNT(DISTINCT CASE WHEN attendance_ratio_present >= 0.5 THEN student_id ELSE NULL END) - COUNT(DISTINCT CASE WHEN attendance_ratio_absent > 0.5 THEN student_id ELSE NULL END) AS student_with_other_attendance_count, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 month')::DATE AS start_date_considered,  (DATE_TRUNC('month', CURRENT_DATE)- Interval '1 day')::DATE AS end_date_considered FROM (SELECT student_id, SUM(month_present_count) / NULLIF(SUM(month_days_recorded), 0) AS attendance_ratio_present, SUM(month_absent_count) / NULLIF(SUM(month_days_recorded), 0) AS attendance_ratio_absent FROM monthly_student_attendance WHERE month_start_date >= (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 month')::DATE AND month_end_date <= (DATE_TRUNC('month', CURRENT_DATE)- Interval '1 day')::DATE GROUP BY student_id) AS attendance_summary;"
        },
        {
            "Question": "What is the absenteeism rate among students in schools with fewer than 100 students this year?",
            "SQL": "SELECT ROUND(CASE WHEN SUM(t1.month_present_count) = 0 THEN NULL ELSE SUM(t1.month_absent_count) / SUM(t1.month_present_count) END, 5) AS absenteeism_rate FROM monthly_student_attendance t1 INNER JOIN total_students_students t2 ON t1.school_code = t2.school_code WHERE t2.total_students < 100;"
        },
        {
            "Question": "Give me student attendance for last three months?",
            "SQL": "SELECT COUNT(DISTINCT student_id) AS total_students, COUNT(DISTINCT CASE WHEN attendance_ratio_present >= 0.5 THEN student_id ELSE NULL END) AS present_students, COUNT(DISTINCT CASE WHEN attendance_ratio_absent > 0.5 THEN student_id ELSE NULL END) AS absent_students, COUNT(DISTINCT student_id) -  COUNT(DISTINCT CASE WHEN attendance_ratio_present >= 0.5 THEN student_id ELSE NULL END) - COUNT(DISTINCT CASE WHEN attendance_ratio_absent > 0.5 THEN student_id ELSE NULL END) AS student_with_other_attendance_count, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 month')::DATE AS start_date_considered,  (DATE_TRUNC('month', CURRENT_DATE)- Interval '1 day')::DATE AS end_date_considered FROM (SELECT student_id, SUM(month_present_count) / NULLIF(SUM(month_days_recorded), 0) AS attendance_ratio_present, SUM(month_absent_count) / NULLIF(SUM(month_days_recorded), 0) AS attendance_ratio_absent FROM monthly_student_attendance WHERE month_start_date >= (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 month')::DATE AND month_end_date <= (DATE_TRUNC('month', CURRENT_DATE)- Interval '1 day')::DATE GROUP BY student_id) AS attendance_summary;"
        },
        {
            "Question": "How many schools have reported a significant drop in student attendance in september compared to august",
            "SQL": "WITH august_attendance AS (SELECT school_code, sum(month_present_count) AS august_student_count FROM   monthly_student_attendance WHERE  month_end_date = '2024-08-31' GROUP  BY school_code), september_attendance AS (SELECT school_code, sum(month_present_count) AS september_student_count FROM   monthly_student_attendance WHERE  month_end_date = '2024-09-30' GROUP  BY school_code), attendance_comparison AS (SELECT a.school_code, a.august_student_count, s.september_student_count, ( a.august_student_count - s.september_student_count ) AS drop_in_attendance FROM   august_attendance a INNER JOIN september_attendance s ON a.school_code = s.school_code) SELECT Count(*) AS schools_with_significant_drop FROM   attendance_comparison WHERE  drop_in_attendance > 10;"
        },
        {
            "Question": "Compare the student attendance percentage between july and august",
            "SQL": "SELECT ROUND((SUM(CASE WHEN log_date >= '2024-07-01' AND log_date <= '2024-07-31' AND attendance_status = 1 THEN 1 ELSE 0 END) * 100.0) /  COUNT(CASE WHEN log_date >= '2024-07-01' AND log_date <= '2024-07-31' THEN 1 END), 2) AS July_Attendance_Percentage,  ROUND( (SUM(CASE WHEN log_date >= '2024-08-01' AND log_date <= '2024-08-31' AND attendance_status = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(CASE WHEN log_date >= '2024-08-01' AND log_date <= '2024-08-31' THEN 1 END), 2) AS August_Attendance_Percentage, '2024-07-01'::date AS start_date_considered, '2024-08-31'::date AS end_date_considered FROM  student_attendance;"
        },
        {
            "Question": "How many students attended all days in September?",
            "SQL": "SELECT COUNT(DISTINCT student_id) AS students_attended_all_days_in_september, '2024-09-01'::date AS start_date_considered, '2024-09-30'::date AS end_date_considered FROM monthly_student_attendance WHERE  month_start_date = '2024-09-01' AND month_days_recorded = (SELECT MAX(month_days_recorded) FROM monthly_student_attendance WHERE month_start_date = '2024-09-01');"
        },
        {
            "Question": "What is the average student attendance trend for the last quarter?",
            "SQL": "SELECT ROUND(AVG(CASE WHEN month_days_recorded > 0 THEN (month_present_count * 1.0 / month_days_recorded) * 100 ELSE 0 END), 2) AS average_attendance_percentage,(DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 day') - INTERVAL '3 months')::date AS start_date_considered, (DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 day') - INTERVAL '1 day')::date AS end_date_considered FROM monthly_student_attendance WHERE month_start_date >= (DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 day') - INTERVAL '3 months') AND month_end_date <= (DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 day') - INTERVAL '1 day');"
        },
        {
            "Question": "How many class 5 students were absent in last two week?",
            "SQL": "SELECT COUNT(DISTINCT (CASE WHEN (t1.week_absent_count * 1.0 / t1.week_days_recorded) >= 0.5 THEN t1.student_id END)) AS absent_students, COUNT(DISTINCT t1.student_id) AS total_students, DATE_TRUNC('week', CURRENT_DATE - INTERVAL '2 week')::date AS starting_date, (DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') + INTERVAL '6 day')::date AS ending_date FROM weekly_student_attendance t1 JOIN student_registry t2 ON t2.student_id = t1.student_id WHERE t2.class = 5 AND t1.week_start_date >= DATE_TRUNC('week', CURRENT_DATE - INTERVAL '2 week')::date AND t1.week_end_date <= (DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') + INTERVAL '6 day')::date;"
        },
        {
            "Question": "What percentage of students had  perfect attendance last month?",
            "SQL": "SELECT COUNT(DISTINCT CASE WHEN month_absent_count = 0 THEN student_id END) AS students_with_perfect_attendance, COUNT(DISTINCT student_id) AS total_students_last_month, ROUND((COUNT(DISTINCT CASE WHEN month_absent_count = 0 THEN student_id END) * 1.0 / NULLIF(COUNT(DISTINCT student_id), 0)) * 100, 2) AS percentage_with_perfect_attendance, DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')::date AS month_start_date, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day')::date AS month_end_date FROM monthly_student_attendance WHERE month_start_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND month_end_date < DATE_TRUNC('month', CURRENT_DATE);"
        },
        {
            "Question": "Give me student attendance based on school type",
            "SQL": "WITH attendance_summary AS (SELECT t1.school_code, t2.school_type, t1.student_id, SUM(t1.month_present_count) AS total_present, SUM(t1.month_days_recorded) AS total_days_recorded, SUM(t1.month_absent_count) AS total_absent FROM monthly_student_attendance t1 INNER JOIN school_registry t2 ON t1.school_code = t2.school_code GROUP BY t1.school_code, t2.school_type, t1.student_id) SELECT school_type, COUNT(DISTINCT CASE WHEN total_present * 1.0 / total_days_recorded >= 0.5 THEN student_id END) AS present_count, COUNT(DISTINCT CASE WHEN total_absent * 1.0 / total_days_recorded > 0.5 THEN student_id END) AS absent_count, COUNT(DISTINCT student_id) AS total_students FROM attendance_summary GROUP BY school_type;"
        },
        {
            "Question": "Give me the list of districts in descending order of attendance percentage of students",
            "SQL": "SELECT district_name, ROUND((SUM(t1.month_present_count) * 1.0 / NULLIF(SUM(t1.month_days_recorded), 0)) * 100, 2) AS attendance_percentage, COUNT(DISTINCT t1.student_id) AS total_students FROM monthly_student_attendance t1 INNER JOIN school_registry t2 ON t1.school_code = t2.school_code WHERE t1.month_start_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND t1.month_end_date < DATE_TRUNC('month', CURRENT_DATE) GROUP BY t2.district_name ORDER BY attendance_percentage DESC;"
        },
        {
            "Question": "How many schools had more than 95% student attendance in September?",
            "SQL": "SELECT COUNT(DISTINCT school_code) AS schools_with_more_than_95_percent_attendance, '2024-09-01'::date AS attendance_month_start, '2024-09-30'::date AS attendance_month_end FROM monthly_student_attendance WHERE month_start_date = '2024-09-01' AND month_end_date = '2024-09-30' AND ROUND(month_present_count * 1.0 / NULLIF(month_present_count + month_absent_count, 0) * 100, 2) > 95;"
        },
        {
            "Question": "Yesterday attendance?",
            "SQL": "SELECT COUNT(DISTINCT CASE WHEN attendance_status = 1 THEN student_id END) AS present_students, COUNT(DISTINCT CASE WHEN attendance_status = 2 THEN student_id END) AS absent_students, COUNT(DISTINCT student_id) AS total_students, (CURRENT_DATE -Interval '1 day')::date AS date_considered FROM student_attendance WHERE log_date = CURRENT_DATE -Interval '1 day';"
        },
        {
            "Question": "Today attendance?",
            "SQL": "SELECT COUNT(DISTINCT CASE WHEN attendance_status = 1 THEN student_id END) AS present_students, COUNT(DISTINCT CASE WHEN attendance_status = 2 THEN student_id END) AS absent_students, COUNT(DISTINCT student_id) AS total_students, (CURRENT_DATE - Interval '1 day')::date AS date_considered /* we have data up to yesterday only */ FROM student_attendance WHERE log_date = CURRENT_DATE - Interval '1 day';"
        },
        {
            "Question": "This week attendance?",
            "SQL": "WITH date_range AS (SELECT DATE_TRUNC('week', CURRENT_DATE)::date AS start_date_considered,(CURRENT_DATE - INTERVAL '1 day')::date AS end_date_considered),period_length AS (SELECT (CASE WHEN end_date_considered - start_date_considered = 0 THEN 1 ELSE end_date_considered - start_date_considered END) AS total_days FROM date_range), present_student_for_given_time AS (SELECT student_id, COUNT(CASE WHEN attendance_status = 1 THEN 1 END) AS days_present, (SELECT total_days FROM period_length) AS total_days FROM student_attendance CROSS JOIN date_range WHERE log_date >= start_date_considered AND log_date <= end_date_considered GROUP BY student_id) SELECT (SELECT start_date_considered FROM date_range) AS start_date_considered,(SELECT end_date_considered FROM date_range) AS end_date_considered, COUNT(CASE WHEN (days_present::float / total_days) >= 0.5 THEN 1 END) AS present_students, COUNT(CASE WHEN (days_present::float / total_days) < 0.5 THEN 1 END) AS absent_students, COUNT(*) AS total_students FROM present_student_for_given_time;"
        },
        {
            "Question": "This month attendance?",
            "SQL": "WITH date_range AS (SELECT DATE_TRUNC('month', CURRENT_DATE)::date AS start_date_considered,(CURRENT_DATE - INTERVAL '1 day')::date AS end_date_considered),period_length AS (SELECT (CASE WHEN end_date_considered - start_date_considered = 0 THEN 1 ELSE end_date_considered - start_date_considered END) AS total_days FROM date_range), present_student_for_given_time AS (SELECT student_id, COUNT(CASE WHEN attendance_status = 1 THEN 1 END) AS days_present, (SELECT total_days FROM period_length) AS total_days FROM student_attendance CROSS JOIN date_range WHERE log_date >= start_date_considered AND log_date <= end_date_considered GROUP BY student_id) SELECT (SELECT start_date_considered FROM date_range) AS start_date_considered,(SELECT end_date_considered FROM date_range) AS end_date_considered, COUNT(CASE WHEN (days_present::float / total_days) >= 0.5 THEN 1 END) AS present_students, COUNT(CASE WHEN (days_present::float / total_days) < 0.5 THEN 1 END) AS absent_students, COUNT(*) AS total_students FROM present_student_for_given_time;"
        },
        {
            "Question": "This year attendance?",
            "SQL": "WITH date_range AS (SELECT DATE_TRUNC('year', CURRENT_DATE)::date AS start_date_considered,(CURRENT_DATE - INTERVAL '1 day')::date AS end_date_considered),period_length AS (SELECT (CASE WHEN end_date_considered - start_date_considered = 0 THEN 1 ELSE end_date_considered - start_date_considered END) AS total_days FROM date_range), present_student_for_given_time AS (SELECT student_id, COUNT(CASE WHEN attendance_status = 1 THEN 1 END) AS days_present, (SELECT total_days FROM period_length) AS total_days FROM student_attendance CROSS JOIN date_range WHERE log_date >= start_date_considered AND log_date <= end_date_considered GROUP BY student_id) SELECT (SELECT start_date_considered FROM date_range) AS start_date_considered,(SELECT end_date_considered FROM date_range) AS end_date_considered, COUNT(CASE WHEN (days_present::float / total_days) >= 0.5 THEN 1 END) AS present_students, COUNT(CASE WHEN (days_present::float / total_days) < 0.5 THEN 1 END) AS absent_students, COUNT(*) AS total_students FROM present_student_for_given_time;"
        },
        {
            "Question": "This quarter attendance?",
            "SQL": "WITH date_range AS (SELECT DATE_TRUNC('quarter', CURRENT_DATE)::date AS start_date_considered,(CURRENT_DATE - INTERVAL '1 day')::date AS end_date_considered),period_length AS (SELECT (CASE WHEN end_date_considered - start_date_considered = 0 THEN 1 ELSE end_date_considered - start_date_considered END) AS total_days FROM date_range), present_student_for_given_time AS (SELECT student_id, COUNT(CASE WHEN attendance_status = 1 THEN 1 END) AS days_present, (SELECT total_days FROM period_length) AS total_days FROM student_attendance CROSS JOIN date_range WHERE log_date >= start_date_considered AND log_date <= end_date_considered GROUP BY student_id) SELECT (SELECT start_date_considered FROM date_range) AS start_date_considered,(SELECT end_date_considered FROM date_range) AS end_date_considered, COUNT(CASE WHEN (days_present::float / total_days) >= 0.5 THEN 1 END) AS present_students, COUNT(CASE WHEN (days_present::float / total_days) < 0.5 THEN 1 END) AS absent_students, COUNT(*) AS total_students FROM present_student_for_given_time;"
        },
        {
            "Question": "How does student attendance vary between primary and secondary schools this year?",
            "SQL": "SELECT school_category, present_students, absent_students, (ROUND(present_students * 1.0/total_students, 4)*100) present_percentage, (ROUND(absent_students*1.0 /total_students, 4)*100) AS absent_percentage, total_students, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month')::DATE AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day')::DATE AS end_date_considered FROM (SELECT school_category, COUNT(DISTINCT CASE WHEN (month_present_count * 1.0 / month_days_recorded) >= 0.5 THEN student_id END) AS present_students, COUNT(DISTINCT CASE WHEN (month_absent_count * 1.0 / month_days_recorded) > 0.5 THEN student_id END) AS absent_students, COUNT(DISTINCT student_id) AS total_students FROM  monthly_student_attendance t1 INNER JOIN school_registry t2 ON t1.school_code = t2.school_code WHERE (school_category IN ('Pr. with Up.Pr. sec. and H.Sec.', 'Primary', 'Up. Pr. Secondary and Higher Sec', 'Upper Pr. and Secondary')) AND month_start_date >= (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month') AND month_end_date <= (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day') GROUP BY school_category);"
        },
        {
            "Question": "Last month attendance in schools where boys and girls both are studying.",
            "SQL": "SELECT COUNT( DISTINCT CASE WHEN (month_present_count * 1.0 / month_days_recorded) >= 0.5 THEN student_id END) AS present_students, COUNT( DISTINCT CASE WHEN (month_absent_count * 1.0 / month_days_recorded) > 0.5 THEN student_id END) AS absent_students, COUNT(DISTINCT student_id ) AS total_students, DATE_TRUNC('month', CURRENT_DATE - Interval '1 month')::date AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE) - Interval '1 day')::date AS end_date_considered FROM monthly_student_attendance t1 INNER JOIN school_registry t2 ON t1.school_code = t2.school_code WHERE  school_type ILIKE 'Co-educational' AND month_start_date >= DATE_TRUNC('month', CURRENT_DATE - Interval '1 month') AND month_end_date <=(DATE_TRUNC('month', CURRENT_DATE) - Interval '1 day');"
        },
        {   
            "Question": "How many students were absent for atleast one day in last month in pre primary classes.",
            "SQL": "SELECT COUNT(DISTINCT t1.student_id) AS students_absent_for_atleast_one_day, COUNT(DISTINCT t1.student_id) AS total_students, DATE_TRUNC('month', CURRENT_DATE - Interval '1 month')::date AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE )- Interval '1 day')::date AS end_date_considered FROM monthly_student_attendance t1 INNER JOIN student_registry t2 ON t1.student_id = t2.student_id WHERE t1.month_absent_count>0 AND t1.month_start_date >= DATE_TRUNC('month', CURRENT_DATE - Interval '1 month') AND t1.month_end_date <= DATE_TRUNC('month', CURRENT_DATE )- Interval '1 day' AND t2.class IN (-3,-2,-1);"
        },
        {
            "Question": "Give me top 5 district were based on highest absent students",
            "SQL": "SELECT district_name, absent_percentage, DATE_TRUNC('month', CURRENT_DATE - Interval '1 month')::date AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE )- Interval '1 day')::date AS end_date_considered FROM (SELECT district_name, ROUND(SUM(month_absent_count)/ SUM(month_days_recorded)*100, 2) AS absent_percentage FROM monthly_student_attendance t1 INNER JOIN school_registry t2 ON t1.school_code = t2.school_code WHERE t1.month_start_date >= DATE_TRUNC('month', CURRENT_DATE - Interval '1 month') AND t1.month_end_date <= DATE_TRUNC('month', CURRENT_DATE )- Interval '1 day' GROUP BY t2.district_name ORDER BY absent_percentage DESC LIMIT 5);"
        },
        {
            "Question": "Social category wise attendance",
            "SQL": "SELECT t2.social_category, ROUND(SUM(t1.month_absent_count) / SUM(t1.month_days_recorded) * 100, 2) AS absent_percentage ,DATE_TRUNC('month', CURRENT_DATE - Interval '1 month')::date AS start_date_considered, (DATE_TRUNC('month', CURRENT_DATE )- Interval '1 day')::date AS end_date_considered FROM monthly_student_attendance t1  INNER JOIN student_registry t2 ON t1.school_code = t2.school_code WHERE t1.month_start_date >= DATE_TRUNC('month', CURRENT_DATE - Interval '1 month') AND t1.month_end_date <= DATE_TRUNC('month', CURRENT_DATE )- Interval '1 day' GROUP BY t2.social_category;"
        },
        {
            "Question": "What is the percentage of students attending school on Saturdays this semester?",
            "SQL": "SELECT ROUND(AVG(CASE WHEN attendance_status = 1 THEN 1 ELSE 0 END) * 100, 2) AS attn_percentage, DATE_TRUNC('year', CURRENT_DATE)::date AS start_date_considered, (CURRENT_DATE - Interval '1 day')::date AS end_date_considered FROM student_attendance WHERE log_date >= DATE_TRUNC('year', CURRENT_DATE) AND log_date <=CURRENT_DATE - Interval '1 day' AND  EXTRACT(DOW FROM log_date) = 6;"
        },
        {
            "Question": "What is attendance on affiliation borad wise in august",
            "SQL": "WITH board_attendance AS (SELECT affiliation_board, COUNT(DISTINCT CASE WHEN (month_present_count * 1.0 / month_days_recorded) >= 0.5 THEN student_id END) AS present_students,  COUNT(DISTINCT CASE WHEN (month_absent_count * 1.0 / month_days_recorded) > 0.5 THEN student_id END) AS absent_students, COUNT(DISTINCT student_id) AS total_students FROM monthly_student_attendance INNER JOIN school_registry ON monthly_student_attendance.school_code = school_registry.school_code WHERE month_start_date >= '2024-08-01' AND month_end_date <= '2024-08-31' GROUP BY affiliation_board) SELECT affiliation_board AS board, present_students, absent_students, total_students - present_students - absent_students AS students_on_other_status, total_students, '2024-08-01' AS start_date_considered, '2024-08-31' AS end_date_considered FROM board_attendance;"
        }